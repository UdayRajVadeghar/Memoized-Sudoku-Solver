import java.util.HashMap;
import java.util.Map;

public class SudokuSolver {

    private static final int SIZE = 9;
    private int[][] board;
    private Map<String, Boolean> memo;

    public SudokuSolver(int[][] board) {
        this.board = board;
        this.memo = new HashMap<>();
    }

    public boolean solve() {
        boolean[][] dp = new boolean[SIZE][SIZE];
        return solveHelper(0, 0, dp);
    }

    private boolean solveHelper(int row, int col, boolean[][] dp) {
        if (row == SIZE) {
            return true;
        }

        if (col == SIZE) {
            return solveHelper(row + 1, 0, dp);
        }

        if (board[row][col] != 0) {
            return solveHelper(row, col + 1, dp);
        }

        for (int num = 1; num <= SIZE; num++) {
            if (isValidMove(row, col, num)) {
                board[row][col] = num;
                if (solveHelper(row, col + 1, dp)) {
                    dp[row][col] = true;
                    return true;
                }
                board[row][col] = 0;
            }
        }

        return false;
    }

    private boolean isValidMove(int row, int col, int num) {
        return !usedInRow(row, num) && !usedInCol(col, num) && !usedInBox(row - row % 3, col - col % 3, num);
    }

    private boolean usedInRow(int row, int num) {
        for (int col = 0; col < SIZE; col++) {
            if (board[row][col] == num) {
                return true;
            }
        }
        return false;
    }

    private boolean usedInCol(int col, int num) {
        for (int row = 0; row < SIZE; row++) {
            if (board[row][col] == num) {
                return true;
            }
        }
        return false;
    }

    private boolean usedInBox(int startRow, int startCol, int num) {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[row + startRow][col + startCol] == num) {
                    return true;
                }
            }
        }
        return false;
    }

    public void printSolution() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                System.out.print(board[row][col] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] board = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        SudokuSolver solver = new SudokuSolver(board);
        if (solver.solve()) {
            solver.printSolution();
        } else {
            System.out.println("No solution exists");
        }
    }
}
